AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Pushes logs, metrics and traces from AWS to Datadog.
Mappings:
  Constants:
    DdForwarder:
      Version: 3.0.0
Parameters:
  DdApiKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: The Datadog API key, which will be stored in AWS Secrets Manager
  DdSite:
    Type: String
    Default: datadoghq.com
    AllowedValues:
      - datadoghq.com
      - datadoghq.eu
    Description: Set to datadoghq.eu to send data to the Datadog EU site
  FunctionName:
    Type: String
    Default: DatadogForwarder
    Description: The Datadog Forwarder Lambda function name
  MemorySize:
    Type: Number
    Default: 1024
    Description: Memory size for the Datadog Forwarder Lambda function
  Timeout:
    Type: Number
    Default: 120
    Description: Timeout for the Datadog Forwarder Lambda function
  ReservedConcurrency:
    Type: Number
    Default: 100
    Description: Reserved concurrency for the Datadog Forwarder Lambda function
  LogRetentionInDays:
    Type: Number
    Default: 90
    Description: CloudWatch log retention for logs generated by the Datadog Forwarder
      Lambda function
  DdTags:
    Type: String
    Default: ''
    Description: Add custom tags to forwarded logs, comma-delimited
      string, no trailing comma, e.g., env:prod,stack:classic
  DdFetchLambdaTags:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Let the forwarder fetch Lambda tags using GetResources API calls and apply them to the aws.lambda.enhanced.* metrics parsed from the REPORT log
  DdUseTcp:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Let the forwarder send logs over a SSL encrypted TCP connection, instead of the default HTTPS connection
  DdNoSsl:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Disable SSL when forwarding logs, useful for forwarding logs through a proxy
  DdUrl:
    Type: String
    Default: ''
    Description: The endpoint URL to forward the logs to, useful for forwarding logs through a proxy
  DdPort:
    Type: String
    Default: ''
    Description: The endpoint port to forward the logs to, useful for forwarding logs through a proxy
  RedactIp:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Replace text matching \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} with xxx.xxx.xxx.xxx
  RedactEmail:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Replace text matching [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+ with xxxxx@xxxxx.com
  DdScrubbingRule:
    Type: String
    Default: ''
    Description: Replace text matching the supplied regular expression with xxxxx (default) or DD_SCRUBBING_RULE_REPLACEMENT
  DdScrubbingRuleReplacement:
    Type: String
    Default: ''
    Description: Replace text matching DdScrubbingRule with the supplied text
  ExcludeAtMatch:
    Type: String
    Default: ''
    Description: DO NOT send logs matching the supplied regular expression
  IncludeAtMatch:
    Type: String
    Default: ''
    Description: Only send logs matching the supplied regular expression and not excluded by EXCLUDE_AT_MATCH
  DdMultilineLogRegexPattern:
    Type: String
    Default: ''
    Description: Use the supplied regular pattern to detect for a new log line for multiline logs from S3
  DdSkipSslValidation:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Send logs over HTTPS, while NOT validate the certificate provided by the endpoint
Conditions:
  SetFunctionName:
    Fn::Not:
      - Fn::Equals:
        - Ref: FunctionName
        - 'DatadogForwarder'
  SetDdTags:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdTags
        - ''
  SetDdUseTcp:
    Fn::Equals:
      - Ref: DdUseTcp
      - true
  SetDdNoSsl:
    Fn::Equals:
      - Ref: DdNoSsl
      - true
  SetDdUrl:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdUrl
        - ''
  SetDdPort:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdPort
        - ''
  SetRedactIp:
    Fn::Equals:
      - Ref: RedactIp
      - true
  SetRedactEmail:
    Fn::Equals:
      - Ref: RedactEmail
      - true
  SetDdScrubbingRule:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdScrubbingRule
        - ''
  SetDdScrubbingRuleReplacement:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdScrubbingRuleReplacement
        - ''
  SetExcludeAtMatch:
    Fn::Not:
      - Fn::Equals:
        - Ref: ExcludeAtMatch
        - ''
  SetIncludeAtMatch:
    Fn::Not:
      - Fn::Equals:
        - Ref: IncludeAtMatch
        - ''
  SetDdMultilineLogRegexPattern:
    Fn::Not:
      - Fn::Equals:
        - Ref: DdMultilineLogRegexPattern
        - ''
  SetDdSkipSslValidation:
    Fn::Equals:
      - Ref: DdSkipSslValidation
      - true
  SetDdFetchLambdaTags:
    Fn::Equals:
      - Ref: DdFetchLambdaTags
      - true
Resources:
  Forwarder:
    Type: AWS::Serverless::Function
    DependsOn: ForwarderZip
    Properties:
      FunctionName:
        Fn::If:
          - SetFunctionName
          - Ref: FunctionName
          - Ref: AWS::NoValue
      Description: Pushes logs, metrics and traces from AWS to Datadog.
      Handler: lambda_function.lambda_handler
      MemorySize:
        Ref: MemorySize
      Runtime: python3.7
      Timeout:
        Ref: Timeout
      CodeUri:
        Bucket: !Ref ForwarderZipsBucket
        Key:
          Fn::Sub:
            - 'aws-dd-forwarder-${DdForwarderVersion}.zip'
            - { DdForwarderVersion: !FindInMap [Constants, DdForwarder, Version] }
      Layers:
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python37:11
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Trace-Forwarder-Python37:3
      Environment:
        Variables:
          DD_API_KEY_SECRET_ARN:
            Ref: DdApiKeySecret
          DD_SITE:
            Ref: DdSite
          DD_FORWARDER_VERSION: !FindInMap [Constants, DdForwarder, Version]
          DD_TAGS:
            Fn::If:
              - SetDdTags
              - Ref: DdTags
              - Ref: AWS::NoValue
          DD_FETCH_LAMBDA_TAGS:
            Fn::If:
              - SetDdFetchLambdaTags
              - Ref: DdFetchLambdaTags
              - Ref: AWS::NoValue
          DD_USE_TCP:
            Fn::If:
              - SetDdUseTcp
              - Ref: DdUseTcp
              - Ref: AWS::NoValue
          DD_NO_SSL:
            Fn::If:
              - SetDdNoSsl
              - Ref: DdNoSsl
              - Ref: AWS::NoValue
          DD_URL:
            Fn::If:
              - SetDdUrl
              - Ref: DdUrl
              - Ref: AWS::NoValue
          DD_PORT:
            Fn::If:
              - SetDdPort
              - Ref: DdPort
              - Ref: AWS::NoValue
          REDACT_IP:
            Fn::If:
              - SetRedactIp
              - Ref: RedactIp
              - Ref: AWS::NoValue
          REDACT_EMAIL:
            Fn::If:
              - SetRedactEmail
              - Ref: RedactEmail
              - Ref: AWS::NoValue
          DD_SCRUBBING_RULE:
            Fn::If:
              - SetDdScrubbingRule
              - Ref: DdScrubbingRule
              - Ref: AWS::NoValue
          DD_SCRUBBING_RULE_REPLACEMENT:
            Fn::If:
              - SetDdScrubbingRuleReplacement
              - Ref: DdScrubbingRuleReplacement
              - Ref: AWS::NoValue
          EXCLUDE_AT_MATCH:
            Fn::If:
              - SetExcludeAtMatch
              - Ref: ExcludeAtMatch
              - Ref: AWS::NoValue
          INCLUDE_AT_MATCH:
            Fn::If:
              - SetIncludeAtMatch
              - Ref: IncludeAtMatch
              - Ref: AWS::NoValue
          DD_MULTILINE_LOG_REGEX_PATTERN:
            Fn::If:
              - SetDdMultilineLogRegexPattern
              - Ref: DdMultilineLogRegexPattern
              - Ref: AWS::NoValue
          DD_SKIP_SSL_VALIDATION:
            Fn::If:
              - SetDdSkipSslValidation
              - Ref: DdSkipSslValidation
              - Ref: AWS::NoValue
      ReservedConcurrentExecutions:
        Ref: ReservedConcurrency
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: 'arn:aws:s3:::*'
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            Ref: DdApiKeySecret
        - !If
          - SetDdFetchLambdaTags
          -
            Effect: Allow
            Action:
              - tag:GetResources
            Resource: '*'
          - Ref: AWS::NoValue
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Forwarder}
      RetentionInDays:
        Ref: LogRetentionInDays
  DdApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Datadog API Key
      SecretString:
        Ref: DdApiKey
  ForwarderZipsBucket:
    Type: AWS::S3::Bucket
  ForwarderZip:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt 'ForwarderZipCopier.Arn'
      DestZipsBucket: !Ref 'ForwarderZipsBucket'
      SourceZipURL:
        Fn::Sub:
          - 'https://github.com/DataDog/datadog-serverless-functions/releases/download/aws-dd-forwarder-${DdForwarderVersion}/aws-dd-forwarder-${DdForwarderVersion}.zip'
          - { DdForwarderVersion: !FindInMap [Constants, DdForwarder, Version] }
  ForwarderZipCopier:
    Type: AWS::Serverless::Function
    Properties:
      Description: Copies Datadog Forwarder zip to the destination S3 bucket
      Handler: index.handler
      Runtime: python3.7
      Timeout: 300
      InlineCode: |
          import json
          import logging
          import threading
          import boto3
          import urllib.request
          def send_cfn_resp(event, context, response_status):
              resp_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See reasons in CloudWatch Logs - group: {context.log_group_name}, stream:{context.log_stream_name}',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }).encode('utf-8')
              req = urllib.request.Request(url=event['ResponseURL'], data=resp_body, method='PUT')
              with urllib.request.urlopen(req) as f:
                  logging.info(f'Sent response to CloudFormation: {f.status}, {f.reason}')
          def delete_zips(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()
          def copy_zip(source_zip_url, dest_zips_bucket):
              s3 = boto3.client('s3')
              filename = source_zip_url.split('/')[-1]
              with urllib.request.urlopen(source_zip_url) as data:
                  s3.upload_fileobj(data, dest_zips_bucket, filename)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              send_cfn_resp(event, context, 'FAILED')
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              logging.info(f'Received event: {json.dumps(event)}')
              try:
                  source_zip_url = event['ResourceProperties']['SourceZipURL']
                  dest_zips_bucket = event['ResourceProperties']['DestZipsBucket']
                  if event['RequestType'] == 'Delete':
                      delete_zips(dest_zips_bucket)
                  else:
                      copy_zip(source_zip_url, dest_zips_bucket)
              except Exception as e:
                  logging.exception(f'Exception when copying zip from {source_zip_url} to {dest_zips_bucket}')
                  send_cfn_resp(event, context, 'FAILED')
              else:
                  send_cfn_resp(event, context, 'SUCCESS')
              finally:
                  timer.cancel()
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - Fn::Join:
                - '/'
                - - Fn::GetAtt: 'ForwarderZipsBucket.Arn'
                  - '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - Fn::GetAtt: 'ForwarderZipsBucket.Arn'
Outputs:
  DatadogForwarderArn:
    Description: Datadog Forwarder Lambda Function ARN
    Value:
      Fn::GetAtt:
      - Forwarder
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ForwarderArn
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required
      Parameters:
        - DdApiKey
        - DdSite
    - Label:
        default: Lambda Function
      Parameters:
        - FunctionName
        - MemorySize
        - Timeout
        - ReservedConcurrency
        - LogRetentionInDays
    - Label:
        default: Log Forwarding
      Parameters:
        - DdTags
        - DdUseTcp
        - DdNoSsl
        - DdUrl
        - DdPort
        - RedactIp
        - RedactEmail
        - DdScrubbingRule
        - DdScrubbingRuleReplacement
        - ExcludeAtMatch
        - IncludeAtMatch
        - DdMultilineLogRegexPattern
        - DdSkipSslValidation
    - Label:
        default: Experimental
      Parameters:
        - DdFetchLambdaTags